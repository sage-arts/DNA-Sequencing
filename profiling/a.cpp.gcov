        -:    0:Colorization: line numbers: hotness: [41m[K> 50%[m[K [43m[K> 20%[m[K [42m[K> 10%[m[K
        -:    0:Source:a.cpp
        -:    0:Graph:a.gcno
        -:    0:Data:a.gcda
        -:    0:Runs:1
        -:    1[m[K:#include<bits/stdc++.h>
        -:    2[m[K:using namespace std;
        -:    3[m[K:
function get_hexamers_as_text(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) called 4.4k returned 100% blocks executed 60%
     4.4k:    4[m[K:string get_hexamers_as_text(string word){
     4.4k:    5[m[K:     int size=6,n=word.size();
call    0 returned 4.4k
     4.4k:    6[m[K:     string hexamers_as_text="";
call    0 returned 4.4k
call    1 returned 4.4k
branch  2 taken 4.4k (fallthrough)
branch  3 taken 0 (throw)
call    4 never executed
     5.5M:[43m[K    7[m[K:     for(int i=0;i<=n-size;i++){
branch  0 taken 5.5M (fallthrough)
branch  1 taken 4.4k
     5.5M:[43m[K    8[m[K:          hexamers_as_text+=" "+word.substr(i,size);
call    0 returned 5.5M
branch  1 taken 5.5M (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 5.5M
branch  4 taken 5.5M (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 5.5M
branch  7 taken 5.5M (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 5.5M
call   10 returned 5.5M
call   11 never executed
call   12 never executed
        -:    9[m[K:     }
     4.4k:   10[m[K:     return hexamers_as_text;
        -:   11[m[K:}
        -:   12[m[K:
function fit(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >&) called 1 returned 100% blocks executed 76%
        1:   13[m[K:void fit(vector<string> human_texts,unordered_map<string,int>& word_idx){
        2:   14[m[K:     set<string> unique_words;
call    0 returned 1
call    1 returned 1
call    2 never executed
        2:   15[m[K:     string word;
call    0 returned 1
call    1 returned 1
call    2 never executed
     4.4k:   16[m[K:     for(int i=0;i<human_texts.size();i++){
call    0 returned 4.4k
branch  1 taken 4.4k (fallthrough)
branch  2 taken 1
     8.8k:   17[m[K:          stringstream ss(human_texts[i]);
call    0 returned 4.4k
call    1 returned 4.4k
call    2 returned 4.4k
branch  3 taken 4.4k (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 4.4k
call    6 never executed
     5.5M:[43m[K   18[m[K:          while(ss>>word){
call    0 returned 5.5M
branch  1 taken 5.5M (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 5.5M
branch  4 taken 5.5M (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 5.5M (fallthrough)
branch  7 taken 4.4k
     5.5M:[43m[K   19[m[K:               unique_words.insert(word);
call    0 returned 5.5M
branch  1 taken 5.5M (fallthrough)
branch  2 taken 0 (throw)
        -:   20[m[K:          }
        -:   21[m[K:     }
        1:   22[m[K:     int i=0;
     4.5k:   23[m[K:     for(auto it=unique_words.begin();it!=unique_words.end();it++){
call    0 returned 1
call    1 returned 4.5k
call    2 returned 4.5k
branch  3 taken 4.5k (fallthrough)
branch  4 taken 1
     4.5k:   24[m[K:          word_idx[*it]=i;
call    0 returned 4.5k
call    1 returned 4.5k
branch  2 taken 4.5k (fallthrough)
branch  3 taken 0 (throw)
     4.5k:   25[m[K:          i++;
call    0 returned 4.5k
        -:   26[m[K:     }
        1:   27[m[K:}
        -:   28[m[K:
function transform(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >, int, int, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&) called 1 returned 100% blocks executed 79%
        1:   29[m[K:void transform(vector<string> human_texts,unordered_map<string,int> word_idx,int dim1,int dim2,vector<vector<int>>& _X){
        2:   30[m[K:     string word;
call    0 returned 1
call    1 returned 1
call    2 never executed
     2.2k:   31[m[K:     for(int i=0;i<human_texts.size();i++){
call    0 returned 2.2k
branch  1 taken 2.2k (fallthrough)
branch  2 taken 1
     2.2k:   32[m[K:          stringstream ss(human_texts[i]);
call    0 returned 2.2k
call    1 returned 2.2k
call    2 returned 2.2k
branch  3 taken 2.2k (fallthrough)
branch  4 taken 0 (throw)
call    5 never executed
     2.7M:[42m[K   33[m[K:          while(ss>>word){
call    0 returned 2.7M
branch  1 taken 2.7M (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2.7M
branch  4 taken 2.7M (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 2.7M (fallthrough)
branch  7 taken 2.2k
     2.7M:[42m[K   34[m[K:               _X[i][word_idx[word]]++;
call    0 returned 2.7M
branch  1 taken 2.7M (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2.7M
call    4 returned 2.7M
        -:   35[m[K:          }
     2.2k:   36[m[K:          i++;
call    0 returned 2.2k
        -:   37[m[K:     }
        1:   38[m[K:}
        -:   39[m[K:
function get_mean(std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >) called 7 returned 100% blocks executed 86%
        7:   40[m[K:vector<double> get_mean(vector<vector<int>> mat){
        7:   41[m[K:     vector<double> mean(mat[0].size(),0);
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 7
     4.4k:   42[m[K:     for(int i=0;i<mat.size();i++){
call    0 returned 4.4k
branch  1 taken 4.3k (fallthrough)
branch  2 taken 7
    19.4M:[41m[K   43[m[K:          for(int j=0;j<mean.size();j++){
call    0 returned 19.4M
branch  1 taken 19.4M (fallthrough)
branch  2 taken 4.3k
    19.4M:[41m[K   44[m[K:               mean[j]+=mat[i][j];
call    0 returned 19.4M
call    1 returned 19.4M
call    2 returned 19.4M
        -:   45[m[K:          }
        -:   46[m[K:     }
    31.3k:   47[m[K:     for(int i=0;i<mean.size();i++){
call    0 returned 31.3k
branch  1 taken 31.3k (fallthrough)
branch  2 taken 7
    31.3k:   48[m[K:          mean[i]/=mat.size();
call    0 returned 31.3k
call    1 returned 31.3k
        -:   49[m[K:     }
        7:   50[m[K:     return mean;
        -:   51[m[K:}
        -:   52[m[K:
function min_dist_classifier(std::vector<int, std::allocator<int> >, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >) called 35 returned 100% blocks executed 100%
       35:   53[m[K:int min_dist_classifier(vector<int> test,vector<vector<double>> u){
        -:   54[m[K:     int label;
       35:   55[m[K:     double min_dist=DBL_MAX,cur_dist;
      280:   56[m[K:     for(int i=0;i<u.size();i++){
call    0 returned 280
branch  1 taken 245 (fallthrough)
branch  2 taken 35
      245:   57[m[K:          cur_dist=0;
     1.1M:   58[m[K:          for(int j=0;j<test.size();j++){
call    0 returned 1.1M
branch  1 taken 1.1M (fallthrough)
branch  2 taken 245
     1.1M:   59[m[K:               cur_dist+=pow(test[j]-u[i][j],2);
call    0 returned 1.1M
call    1 returned 1.1M
call    2 returned 1.1M
call    3 returned 1.1M
        -:   60[m[K:          }
      245:   61[m[K:          if(cur_dist<min_dist){
branch  0 taken 100 (fallthrough)
branch  1 taken 145
      100:   62[m[K:               min_dist=cur_dist;
      100:   63[m[K:               label=i;
        -:   64[m[K:          }
        -:   65[m[K:     }
       35:   66[m[K:     return label;
        -:   67[m[K:}
        -:   68[m[K:
function main called 1 returned 100% blocks executed 62%
        1:   69[m[K:int main(){
        2:   70[m[K:     fstream file;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 never executed
        2:   71[m[K:     string word,filename;
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 never executed
call    5 never executed
        1:   72[m[K:     filename="human_data.txt";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   73[m[K:     file.open(filename.c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2:   74[m[K:     vector<string> human_texts;
call    0 returned 1
call    1 returned 1
call    2 never executed
        2:   75[m[K:     vector<int> y_data;
call    0 returned 1
call    1 returned 1
call    2 never executed
        1:   76[m[K:     int i=0;
     8.8k:   77[m[K:     while(file>>word){
call    0 returned 8.8k
branch  1 taken 8.8k (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 8.8k
branch  4 taken 8.8k (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 8.8k (fallthrough)
branch  7 taken 1
     8.8k:   78[m[K:          if(i<2){
branch  0 taken 2 (fallthrough)
branch  1 taken 8.8k
        2:   79[m[K:               i++;
        2:   80[m[K:               continue;
        -:   81[m[K:          } 
     8.8k:   82[m[K:          if(i%2){
branch  0 taken 4.4k (fallthrough)
branch  1 taken 4.4k
     4.4k:   83[m[K:               y_data.push_back(stoi(word));
call    0 returned 4.4k
branch  1 taken 4.4k (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 4.4k
branch  4 taken 4.4k (fallthrough)
branch  5 taken 0 (throw)
        -:   84[m[K:          }
        -:   85[m[K:          else{
     4.4k:   86[m[K:               human_texts.push_back(get_hexamers_as_text(word));
call    0 returned 4.4k
branch  1 taken 4.4k (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 4.4k
branch  4 taken 4.4k (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 4.4k
branch  7 taken 4.4k (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 4.4k
call   10 returned 4.4k
call   11 never executed
call   12 never executed
        -:   87[m[K:          }
     8.8k:   88[m[K:          i++;
        -:   89[m[K:     }
        2:   90[m[K:     unordered_map<string,int> word_idx;
call    0 returned 1
call    1 returned 1
call    2 never executed
        1:   91[m[K:     fit(human_texts,word_idx);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 never executed
        1:   92[m[K:     int dim1=y_data.size(),dim2=word_idx.size();
call    0 returned 1
call    1 returned 1
        3:   93[m[K:     vector<vector<int>> _X(dim1,vector<int>(dim2,0));
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 never executed
        1:   94[m[K:     transform(human_texts,word_idx,dim1,dim2,_X);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 never executed
call   12 never executed
        2:   95[m[K:     vector<vector<vector<int>>> X(7);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
     4.4k:   96[m[K:     for(int i=0;i<dim1;i++){
branch  0 taken 4.4k (fallthrough)
branch  1 taken 1
     4.4k:   97[m[K:          X[y_data[i]].push_back(_X[i]);
call    0 returned 4.4k
call    1 returned 4.4k
call    2 returned 4.4k
call    3 returned 4.4k
branch  4 taken 4.4k (fallthrough)
branch  5 taken 0 (throw)
        -:   98[m[K:     }
        2:   99[m[K:     vector<vector<int>> test_vectors;
call    0 returned 1
call    1 returned 1
call    2 never executed
        1:  100[m[K:     int samples=5;
        8:  101[m[K:     for(int i=0;i<X.size();i++){
call    0 returned 8
branch  1 taken 7 (fallthrough)
branch  2 taken 1
       42:  102[m[K:          for(int j=0;j<samples;j++){
branch  0 taken 35 (fallthrough)
branch  1 taken 7
       35:  103[m[K:               test_vectors.push_back(X[i][j]);
call    0 returned 35
call    1 returned 35
call    2 returned 35
branch  3 taken 35 (fallthrough)
branch  4 taken 0 (throw)
        -:  104[m[K:          }
        7:  105[m[K:          X[i].erase(X[i].begin(),X[i].begin()+5);
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
branch  9 taken 7 (fallthrough)
branch 10 taken 0 (throw)
        -:  106[m[K:     }
        1:  107[m[K:     vector<vector<double>> u;
call    0 returned 1
call    1 never executed
        8:  108[m[K:     for(int i=0;i<X.size();i++){
call    0 returned 8
branch  1 taken 7 (fallthrough)
branch  2 taken 1
        7:  109[m[K:          u.push_back(get_mean(X[i]));
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 7
branch  8 taken 7 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 7
call   11 returned 7
call   12 never executed
call   13 never executed
        -:  110[m[K:     }
       36:  111[m[K:     for(int i=0;i<test_vectors.size();i++){
call    0 returned 36
branch  1 taken 35 (fallthrough)
branch  2 taken 1
       35:  112[m[K:          int label=min_dist_classifier(test_vectors[i],u);
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 35
call    4 returned 35
branch  5 taken 35 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 35
branch  8 taken 35 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 35
call   11 returned 35
call   12 never executed
call   13 never executed
       35:  113[m[K:          cout<<label<<endl;
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 35
branch  4 taken 35 (fallthrough)
branch  5 taken 0 (throw)
        -:  114[m[K:     }
        1:  115[m[K:     return 0;
call    0 returned 1
        -:  116:}
